@use "sass:math";

@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size) {
  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-font-size);
  $u4: unit($max-font-size);

  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
    & {
      font-size: $min-font-size;
      @media screen and (min-width: $min-vw) {
        font-size: calc(
          #{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} *
            math.div((100vw - #{$min-vw}), #{strip-unit($max-vw - $min-vw)})
        );
      }
      @media screen and (min-width: $max-vw) {
        font-size: $max-font-size;
      }
    }
  }
}

@mixin visually-hidden() {
  clip: rect(0 0 0 0);
  clip-path: inset(50%);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

@mixin disabled-btn() {
  &:disabled,
  &.disabled,
  [disabled] {
    background-color: $ntr-light-03;
    border-color: currentColor;
    color: $ntr-light-01;

    svg path {
      stroke: currentColor;
    }
  }
}

@mixin show-hidden($pos: absolute) {
  clip: auto;
  height: auto;
  position: $pos;
  clip-path: none;
  white-space: normal;
  width: auto;
}

@mixin transition($type: all, $duration: 0.2s, $timing: linear) {
  transition: $type $duration $timing;
}

@mixin toWhite() {
  filter: brightness(0) invert(1);
  -webkit-filter: brightness(0) invert(1);
}

@mixin toBlack() {
  filter: invert(0%) sepia(0%) saturate(7500%) hue-rotate(181deg) brightness(98%) contrast(106%);
}

@mixin toRed() {
  filter: brightness(0) saturate(100%) invert(52%) sepia(64%) saturate(7385%) hue-rotate(345deg) brightness(100%)
    contrast(84%);
}

@mixin font-size($value: 16, $weight: 400, $style: normal) {
  font-size: rem($value);
  font-weight: $weight;
  font-style: $style;
}

@mixin flexbox($dir: row) {
  display: flex;
  flex-direction: $dir;
}

@mixin grid-repeated-cols($size: 0, $gap: 0, $type: "minmax", $count: 0) {
  $size: rem($size);
  $gap: rem($gap);
  display: grid;
  grid-gap: $gap;

  @if $type == "minmax" {
    grid-template-columns: repeat(auto-fill, minmax($size, 1fr));
  } @else if ($type == "fr") {
    grid-template-columns: repeat($count, 1fr);
  }
}

@mixin align-center($dir: row, $wrap: nowrap) {
  @include flexbox($dir);
  align-items: center;
  flex-wrap: $wrap;
}

@mixin flex-center($dir: row) {
  @include align-center($dir);
  justify-content: center;
}

@mixin justify-center($dir: row) {
  @include align-center($dir);
  justify-content: center;
}

@mixin justify-end($dir: row) {
  @include align-center($dir);
  justify-content: flex-end;
}

@mixin justify-between($dir: row) {
  @include align-center($dir);
  justify-content: space-between;
}

@mixin toRem($property, $value) {
  #{$property}: math.div($value, 16) * 1rem;
}

@mixin box($width) {
  @include toRem(width, $width);
  @include toRem(height, $width);
}

@mixin rem-fallback($property, $values...) {
  $max: length($values);
  $pxValues: "";
  $remValues: "";

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $pxValues: #{$pxValues + $value * 16} * 1px;

    @if $i < $max {
      $pxValues: #{$pxValues + " "};
    }
  }

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $remValues: #{$remValues + $value} * 1rem;

    @if $i < $max {
      $remValues: #{$remValues + " "};
    }
  }

  #{$property}: $pxValues;
  #{$property}: $remValues;
}

@mixin action-css(
  $types: (
    hover,
  )
) {
  @each $type in $types {
    @if $type == "active" {
      &.#{$type} {
        @content;
      }
    } @else {
      &:#{$type} {
        @content;
      }
    }
  }
}

@mixin pseudo(
  $pseudos: (
    before,
  )
) {
  @each $ps in $pseudos {
    position: relative;

    &:#{$ps} {
      content: "";
      position: absolute;
      @content;
    }
  }
}

@mixin advancedRem($key, $values) {
  $baseline: rem(16);

  // #{$key}: $values;

  $remlist: ();

  @each $value in $values {
    @if $value == 0 {
      $remlist: append($remlist, $value);
    } @else {
      $remlist: append($remlist, rem($value));
    }
  }

  #{$key}: $remlist;
}

@mixin tablet {
  @media screen and (min-width: #{rem($tablet-width)}) and (max-width: #{rem($desktop-width - 1)}) {
    @content;
  }
}

@mixin desktop {
  @media screen and (min-width: #{rem($desktop-width)}) {
    @content;
  }
}

@mixin mobile {
  @media screen and (min-width: #{rem($mobile-width)}) and (max-width: #{rem($tablet-width)}) {
    @content;
  }
}

@mixin breakpoint($min-width, $max-width) {
  $min-width: rem($min-width);
  $max-width: rem($max-width);

  @media screen and (min-width: #{$min-width}) and (max-width: #{$max-width}) {
    @content;
  }
}

@mixin breakpoint-max($max-width) {
  $max-width: rem($max-width);

  @media screen and (max-width: #{$max-width}) {
    @content;
  }
}

@mixin breakpoint-min($min-width) {
  $min-width: rem($min-width);

  @media screen and (min-width: #{$min-width}) {
    @content;
  }
}

@mixin arrange($top: auto, $left: auto, $right: auto, $bottom: auto) {
  $top: rem($top);
  $left: rem($left);
  $right: rem($right);
  $bottom: rem($bottom);

  top: $top;
  left: $left;
  right: $right;
  bottom: $bottom;
}

@mixin flex-cell-width($width) {
  @if ($width == auto) {
    flex: 1 1 0%;
    width: auto;
    max-width: none;
  } @else {
    flex-basis: $width;
    width: $width;
    max-width: $width;
  }
}

/// Flex сетка
/// @require {mixin} media
/// @require {mixin} flex-cell-width
/// @param {Number} $columns [12] - количество колонок
/// @param {Map} $screens [()] - карта брейкпоинтов, для которых нужно сделать хелперы
@mixin helpers-grid($columns: 12, $screens: ()) {
  .gcell {
  }

  .grid {
    $this: &;
    display: flex;
    flex-wrap: wrap;
    list-style: none;
    padding: 0;
    margin: 0 rem(-20);

    &-gap {
      & > * {
        margin-bottom: rem(30);
      }
    }

    &--no-gap {
      margin: 0;

      & > * {
        padding: 0 !important;
      }
    }

    @for $i from 1 through $columns {
      /// @access private
      /// @type {Size}
      $cell-width: percentage(math.div(math.div($columns, $i), $columns));

      &--#{$i} {
        & > * {
          // sass-lint:disable-line no-universal-selectors
          @include flex-cell-width($cell-width);
          padding: 0 rem(20);
        }
      }

      @each $screen, $width in $screens {
        @include media($width) {
          &--#{$screen}-#{$i} {
            & > * {
              // sass-lint:disable-line no-universal-selectors
              @include flex-cell-width($cell-width);
            }
          }
        }
      }
    }

    &--auto {
      & > * {
        // sass-lint:disable-line no-universal-selectors
        @include flex-cell-width(auto);
      }
    }

    @each $screen, $width in $screens {
      @include media($width) {
        &--#{$screen}-auto {
          & > * {
            // sass-lint:disable-line no-universal-selectors
            @include flex-cell-width(auto);
          }
        }
      }
    }
  }

  // ячейки
  .gcell {
    min-width: 1px;
    min-height: 1px;

    &--auto {
      @include flex-cell-width(auto);
    }

    // с медиа-запросами по схеме .gcell--lg-auto
    @each $screen, $width in $screens {
      @include media($width) {
        &--#{$screen}-auto {
          @include flex-cell-width(auto);
        }
      }
    }

    // Создаем классы по схеме .gcell--3
    @for $i from 1 through $columns {
      $cell-width: percentage(math.div($i, $columns));

      &--#{$i} {
        @include flex-cell-width($cell-width);
      }
    }

    &--1-of-5 {
      @include flex-cell-width(20%);
    }

    &--4-of-5 {
      @include flex-cell-width(80%);
    }

    //  с медиа-запросами по схеме .gcell--lg-auto
    @each $screen, $width in $screens {
      @include media($width) {
        @for $i from 1 through $columns {
          $cell-width: percentage(math.div($i, $columns));

          &--#{$screen}-#{$i} {
            @include flex-cell-width($cell-width);
          }
        }

        &--#{$screen}-1-of-5 {
          @include flex-cell-width(20%);
        }

        &--#{$screen}-4-of-5 {
          @include flex-cell-width(80%);
        }
      }
    }
  }
}

@mixin media($value, $direction: min, $dimension: width) {
  $corrector: 0;

  @if $direction == max {
    $corrector: -1;
  }

  @if type-of($value) == number {
    $dir: #{$direction}-width;

    @if $dimension == height {
      $dir: #{$direction}-height;
    }

    @media only screen and ($dir: ($value + $corrector)) {
      @content;
    }
  } @else {
    @media #{$value} {
      @content;
    }
  }
}
